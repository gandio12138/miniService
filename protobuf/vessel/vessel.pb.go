// Code generated by protoc-gen-go. DO NOT EDIT.
// source: protocol/vessel.proto

package vessel

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Vessel struct {
	VesselId             string   `protobuf:"bytes,1,opt,name=vesselId,proto3" json:"vesselId,omitempty"`
	Capacity             int32    `protobuf:"varint,2,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MaxWeight            int32    `protobuf:"varint,3,opt,name=maxWeight,proto3" json:"maxWeight,omitempty"`
	VesselName           string   `protobuf:"bytes,4,opt,name=vesselName,proto3" json:"vesselName,omitempty"`
	Available            bool     `protobuf:"varint,5,opt,name=available,proto3" json:"available,omitempty"`
	OwnerId              string   `protobuf:"bytes,6,opt,name=ownerId,proto3" json:"ownerId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Vessel) Reset()         { *m = Vessel{} }
func (m *Vessel) String() string { return proto.CompactTextString(m) }
func (*Vessel) ProtoMessage()    {}
func (*Vessel) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0d8e0d06c6934b, []int{0}
}

func (m *Vessel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Vessel.Unmarshal(m, b)
}
func (m *Vessel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Vessel.Marshal(b, m, deterministic)
}
func (m *Vessel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vessel.Merge(m, src)
}
func (m *Vessel) XXX_Size() int {
	return xxx_messageInfo_Vessel.Size(m)
}
func (m *Vessel) XXX_DiscardUnknown() {
	xxx_messageInfo_Vessel.DiscardUnknown(m)
}

var xxx_messageInfo_Vessel proto.InternalMessageInfo

func (m *Vessel) GetVesselId() string {
	if m != nil {
		return m.VesselId
	}
	return ""
}

func (m *Vessel) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *Vessel) GetMaxWeight() int32 {
	if m != nil {
		return m.MaxWeight
	}
	return 0
}

func (m *Vessel) GetVesselName() string {
	if m != nil {
		return m.VesselName
	}
	return ""
}

func (m *Vessel) GetAvailable() bool {
	if m != nil {
		return m.Available
	}
	return false
}

func (m *Vessel) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

type FindAvailableReq struct {
	Capacity             int32    `protobuf:"varint,1,opt,name=capacity,proto3" json:"capacity,omitempty"`
	MaxWeight            int32    `protobuf:"varint,2,opt,name=maxWeight,proto3" json:"maxWeight,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindAvailableReq) Reset()         { *m = FindAvailableReq{} }
func (m *FindAvailableReq) String() string { return proto.CompactTextString(m) }
func (*FindAvailableReq) ProtoMessage()    {}
func (*FindAvailableReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0d8e0d06c6934b, []int{1}
}

func (m *FindAvailableReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAvailableReq.Unmarshal(m, b)
}
func (m *FindAvailableReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAvailableReq.Marshal(b, m, deterministic)
}
func (m *FindAvailableReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAvailableReq.Merge(m, src)
}
func (m *FindAvailableReq) XXX_Size() int {
	return xxx_messageInfo_FindAvailableReq.Size(m)
}
func (m *FindAvailableReq) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAvailableReq.DiscardUnknown(m)
}

var xxx_messageInfo_FindAvailableReq proto.InternalMessageInfo

func (m *FindAvailableReq) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *FindAvailableReq) GetMaxWeight() int32 {
	if m != nil {
		return m.MaxWeight
	}
	return 0
}

type FindAvailableRsp struct {
	Vessel               *Vessel   `protobuf:"bytes,1,opt,name=vessel,proto3" json:"vessel,omitempty"`
	Vessels              []*Vessel `protobuf:"bytes,2,rep,name=vessels,proto3" json:"vessels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *FindAvailableRsp) Reset()         { *m = FindAvailableRsp{} }
func (m *FindAvailableRsp) String() string { return proto.CompactTextString(m) }
func (*FindAvailableRsp) ProtoMessage()    {}
func (*FindAvailableRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c0d8e0d06c6934b, []int{2}
}

func (m *FindAvailableRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindAvailableRsp.Unmarshal(m, b)
}
func (m *FindAvailableRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindAvailableRsp.Marshal(b, m, deterministic)
}
func (m *FindAvailableRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindAvailableRsp.Merge(m, src)
}
func (m *FindAvailableRsp) XXX_Size() int {
	return xxx_messageInfo_FindAvailableRsp.Size(m)
}
func (m *FindAvailableRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_FindAvailableRsp.DiscardUnknown(m)
}

var xxx_messageInfo_FindAvailableRsp proto.InternalMessageInfo

func (m *FindAvailableRsp) GetVessel() *Vessel {
	if m != nil {
		return m.Vessel
	}
	return nil
}

func (m *FindAvailableRsp) GetVessels() []*Vessel {
	if m != nil {
		return m.Vessels
	}
	return nil
}

func init() {
	proto.RegisterType((*Vessel)(nil), "go.grpc.server.vessel.Vessel")
	proto.RegisterType((*FindAvailableReq)(nil), "go.grpc.server.vessel.FindAvailableReq")
	proto.RegisterType((*FindAvailableRsp)(nil), "go.grpc.server.vessel.FindAvailableRsp")
}

func init() { proto.RegisterFile("protocol/vessel.proto", fileDescriptor_2c0d8e0d06c6934b) }

var fileDescriptor_2c0d8e0d06c6934b = []byte{
	// 291 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0xce, 0xcf, 0xd1, 0x2f, 0x4b, 0x2d, 0x2e, 0x4e, 0xcd, 0xd1, 0x03, 0xf3, 0x85, 0x44,
	0xd3, 0xf3, 0xf5, 0xd2, 0x8b, 0x0a, 0x92, 0xf5, 0x8a, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0xf4, 0x20,
	0x92, 0x4a, 0xdb, 0x18, 0xb9, 0xd8, 0xc2, 0xc0, 0x4c, 0x21, 0x29, 0x2e, 0x0e, 0x88, 0xa0, 0x67,
	0x8a, 0x04, 0xa3, 0x02, 0xa3, 0x06, 0x67, 0x10, 0x9c, 0x0f, 0x92, 0x4b, 0x4e, 0x2c, 0x48, 0x4c,
	0xce, 0x2c, 0xa9, 0x94, 0x60, 0x52, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf3, 0x85, 0x64, 0xb8, 0x38,
	0x73, 0x13, 0x2b, 0xc2, 0x53, 0x33, 0xd3, 0x33, 0x4a, 0x24, 0x98, 0xc1, 0x92, 0x08, 0x01, 0x21,
	0x39, 0x2e, 0x2e, 0x88, 0x29, 0x7e, 0x89, 0xb9, 0xa9, 0x12, 0x2c, 0x60, 0x73, 0x91, 0x44, 0x40,
	0xba, 0x13, 0xcb, 0x12, 0x33, 0x73, 0x12, 0x93, 0x72, 0x52, 0x25, 0x58, 0x15, 0x18, 0x35, 0x38,
	0x82, 0x10, 0x02, 0x42, 0x12, 0x5c, 0xec, 0xf9, 0xe5, 0x79, 0xa9, 0x45, 0x9e, 0x29, 0x12, 0x6c,
	0x60, 0xad, 0x30, 0xae, 0x92, 0x0f, 0x97, 0x80, 0x5b, 0x66, 0x5e, 0x8a, 0x23, 0x4c, 0x69, 0x50,
	0x6a, 0x21, 0x8a, 0x2b, 0x19, 0xf1, 0xb9, 0x92, 0x09, 0xcd, 0x95, 0x4a, 0x4d, 0x8c, 0xe8, 0xc6,
	0x15, 0x17, 0x08, 0x99, 0x72, 0xb1, 0x41, 0x1c, 0x0a, 0x36, 0x8c, 0xdb, 0x48, 0x56, 0x0f, 0x6b,
	0x18, 0xea, 0x41, 0xc2, 0x2f, 0x08, 0xaa, 0x58, 0xc8, 0x9c, 0x8b, 0x1d, 0xc2, 0x2a, 0x96, 0x60,
	0x52, 0x60, 0x26, 0xac, 0x0f, 0xa6, 0xda, 0xa8, 0x88, 0x8b, 0x17, 0x22, 0x14, 0x9c, 0x5a, 0x54,
	0x96, 0x99, 0x9c, 0x2a, 0x94, 0xc8, 0xc5, 0x8b, 0xe2, 0x28, 0x21, 0x75, 0x1c, 0x26, 0xa1, 0x87,
	0x84, 0x14, 0x71, 0x0a, 0x8b, 0x0b, 0x9c, 0x04, 0xa3, 0xf8, 0xf5, 0xa0, 0x09, 0xc5, 0x1a, 0x42,
	0x25, 0xb1, 0x81, 0x13, 0x8c, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xf8, 0x27, 0xac, 0x49,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for VesselService service

type VesselServiceClient interface {
	FindAvailable(ctx context.Context, in *FindAvailableReq, opts ...client.CallOption) (*FindAvailableRsp, error)
}

type vesselServiceClient struct {
	c           client.Client
	serviceName string
}

func NewVesselServiceClient(serviceName string, c client.Client) VesselServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "go.grpc.server.vessel"
	}
	return &vesselServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *vesselServiceClient) FindAvailable(ctx context.Context, in *FindAvailableReq, opts ...client.CallOption) (*FindAvailableRsp, error) {
	req := c.c.NewRequest(c.serviceName, "VesselService.FindAvailable", in)
	out := new(FindAvailableRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for VesselService service

type VesselServiceHandler interface {
	FindAvailable(context.Context, *FindAvailableReq, *FindAvailableRsp) error
}

func RegisterVesselServiceHandler(s server.Server, hdlr VesselServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&VesselService{hdlr}, opts...))
}

type VesselService struct {
	VesselServiceHandler
}

func (h *VesselService) FindAvailable(ctx context.Context, in *FindAvailableReq, out *FindAvailableRsp) error {
	return h.VesselServiceHandler.FindAvailable(ctx, in, out)
}
